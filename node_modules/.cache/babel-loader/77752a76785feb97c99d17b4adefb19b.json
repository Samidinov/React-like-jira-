{"ast":null,"code":"var _jsxFileName = \"/home/ds/Desktop/react/todo-list/src/App.js\";\nimport React, { Component } from 'react';\nimport { ReactSortable } from 'react-sortablejs';\nimport TodoCard from './todo/todo-card';\nimport ItemContext from './todo/itemContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      card: [{\n        title: 'Read book',\n        id: Date.now(),\n        todoitems: [{\n          title: 'Квантовый воин'\n        }, {\n          title: 'Будь лучшей версией себя!'\n        }, {\n          title: 'Бакыттын сырын ачтым'\n        }]\n      }, {\n        title: 'Products',\n        id: Date.now() + 1,\n        todoitems: []\n      }]\n    };\n\n    this.addCard = setTitle => {\n      const newCard = {\n        title: 'New card',\n        id: Date.now(),\n        todoitems: []\n      };\n      this.setState({\n        card: [...this.state.card, newCard]\n      });\n    };\n\n    this.changeTitleOfCard = (index, event) => {\n      const newState = { ...this.state\n      };\n      newState.card[index].title = event.target.value;\n      this.setState(newState);\n    };\n\n    this.deleteCard = index => {\n      this.setState(this.state.card.splice(index, 1));\n    };\n\n    this.updateCards = card => {\n      this.setState({\n        card\n      });\n    };\n\n    this.addTodoItem = (title, index) => {\n      // console.log(...this.state.card[index].todoitems);\n      if (title.trim()) {\n        const newTodo = {\n          title: title,\n          done: false,\n          id: Date.now(),\n          chosen: false,\n          selected: false\n        };\n        const card = this.copyTodoCard();\n        card[index].todoitems.push(newTodo);\n        this.setState({\n          card\n        });\n      }\n    };\n\n    this.copyTodoCard = () => {\n      return this.state.card;\n    };\n\n    this.renameTodoItem = (index, todoIndex, newTitle) => {\n      const card = this.copyTodoCard();\n      card[index].todoitems[todoIndex].title = newTitle;\n      this.setState(card => {\n        return card;\n      });\n    };\n\n    this.updateTodosHandle = (todoitems, index) => {\n      const card = this.copyTodoCard();\n      card[index].todoitems.splice(0, card[index].todoitems.length, ...todoitems);\n      this.setState(card => {\n        return card;\n      });\n    };\n\n    this.deleteTodosItem = (itemIndex, index) => {\n      this.setState(this.state.card[index].todoitems.splice(itemIndex, 1));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ReactSortable, {\n        list: this.state.card,\n        setList: this.updateCards,\n        className: \"d-flex align-items-start\",\n        style: {\n          overflow: \"auto\",\n          whiteSpace: \"nowrap\",\n          height: \"100vh\"\n        },\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [this.state.card.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(ItemContext.Provider, {\n              value: {\n                renameTodoItem: this.renameTodoItem,\n                index: index\n              },\n              children: /*#__PURE__*/_jsxDEV(TodoCard, {\n                cardTitle: item.title,\n                changeTitleOfCard: event => this.changeTitleOfCard(index, event),\n                deleteCard: () => this.deleteCard(index),\n                addTodoItem: title => this.addTodoItem(title, index),\n                todoitems: this.state.card[index].todoitems,\n                updateTodosHandle: todoitems => this.updateTodosHandle(todoitems, index),\n                deleteTodosItem: itemIndex => this.deleteTodosItem(itemIndex, index)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(AddNewCard, {\n            onClick: this.addCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nfunction AddNewCard({\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert alert-secondary ml-2 mt-2 col-2 p-0 text-center cursor-pointer shadow\",\n    style: {\n      opacity: '0.5'\n    },\n    onClick: onClick,\n    children: \"+add new card\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AddNewCard;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewCard\");","map":{"version":3,"sources":["/home/ds/Desktop/react/todo-list/src/App.js"],"names":["React","Component","ReactSortable","TodoCard","ItemContext","App","state","card","title","id","Date","now","todoitems","addCard","setTitle","newCard","setState","changeTitleOfCard","index","event","newState","target","value","deleteCard","splice","updateCards","addTodoItem","trim","newTodo","done","chosen","selected","copyTodoCard","push","renameTodoItem","todoIndex","newTitle","updateTodosHandle","length","deleteTodosItem","itemIndex","render","overflow","whiteSpace","height","map","item","AddNewCard","onClick","opacity"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport { ReactSortable } from 'react-sortablejs';\nimport TodoCard from './todo/todo-card';\nimport ItemContext from './todo/itemContext'\n\n\nclass App extends Component{\n  \n    state = {\n\n      card:\n        [\n          {\n            title:'Read book',\n            id:Date.now(),\n            todoitems: [\n              {title:'Квантовый воин'},\n              {title:'Будь лучшей версией себя!'},\n              {title:'Бакыттын сырын ачтым'},\n            ]\n          },\n          {\n            title:'Products',\n            id:Date.now()+1,\n            todoitems: []\n          }\n        ]\n    };\n\n  //card functions\n\n  addCard = (setTitle) => {\n    const newCard = { title:'New card', id:Date.now(), todoitems:[]}\n    this.setState({card : [...this.state.card,newCard]})\n  }\n\n  changeTitleOfCard = (index, event) => {\n    const newState = {...this.state};\n    newState.card[index].title= event.target.value;\n    this.setState(newState);\n  }\n\n  deleteCard = (index) => {\n    this.setState(this.state.card.splice(index,1))\n  }\n\n  updateCards = (card) => {\n    this.setState({card});\n  }\n\n  //Todo items functions\n\n  addTodoItem = (title, index) => {\n    // console.log(...this.state.card[index].todoitems);\n    if(title.trim()) {\n      const newTodo = {\n        title:title,\n        done:false,\n        id: Date.now(),\n        chosen:false,\n        selected: false\n      };\n\n      const card = this.copyTodoCard();\n      card[index].todoitems.push(newTodo);\n      this.setState({card});\n    }\n  }\n\n  copyTodoCard = () => {\n   return this.state.card;\n  }\n\n  renameTodoItem = (index, todoIndex, newTitle) => {\n    const card = this.copyTodoCard();\n    card[index].todoitems[todoIndex].title =newTitle;\n    this.setState(card => {\n      return card\n    });\n\n  }\n\n  updateTodosHandle = (todoitems, index) => {\n    const card = this.copyTodoCard();\n    card[index].todoitems.splice(0, card[index].todoitems.length, ...todoitems);\n    this.setState(card => {\n      return card\n    });\n\n  }\n\n  deleteTodosItem = (itemIndex, index) => {\n    this.setState(this.state.card[index].todoitems.splice(itemIndex,1));\n  }\n\n  render() {\n    return (  \n      < >\n          <ReactSortable list={this.state.card} setList={this.updateCards} className=\"d-flex align-items-start\" style={{overflow: \"auto\",whiteSpace: \"nowrap\", height: \"100vh\"}}>{  \n            <>{\n              this.state.card.map((item, index) => {\n              return (\n                <ItemContext.Provider value={{renameTodoItem: this.renameTodoItem, index:index}}>\n                  <TodoCard \n                    cardTitle={item.title} \n                    changeTitleOfCard={(event)=>this.changeTitleOfCard(index, event)} \n                    deleteCard = {()=>this.deleteCard(index)} \n                    key={item.id}\n                    addTodoItem={(title)=>this.addTodoItem(title,index)} \n                    todoitems = {this.state.card[index].todoitems} \n                    updateTodosHandle = {(todoitems) => this.updateTodosHandle(todoitems, index)} \n                    deleteTodosItem={(itemIndex)=>this.deleteTodosItem(itemIndex, index)}\n                    >\n                  </TodoCard>\n                </ItemContext.Provider>\n              )\n            })}\n            <AddNewCard onClick={this.addCard}/>\n\n          </>\n          }\n          </ReactSortable>\n      </>\n    );\n  }\n}\n\nfunction AddNewCard({onClick}){\n  return(\n    <div className=\"alert alert-secondary ml-2 mt-2 col-2 p-0 text-center cursor-pointer shadow\" style={{ opacity:'0.5'}} onClick={onClick}>\n      +add new card \n    </div>\n\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}